package com.exercise;
/**
 * 计数排序，如何对n个数，进行计数排序要求空间复杂度为O(N)时间复杂度为O(1)
 *利用索引
 *假定你的数字范围在0到65535范围之内，定义一个数组count[65536]（这个空间是常量，和n无关，所以是O(1) )，初值全部为0。
 *
 *那么对于每个这个数字，都做在count中记录一下：
100 => count[100]++
200 => count[200]++
300 => count[300]++
119 => count[119]++
0 => count[0]++
6 => count[6]++
...
最后，遍历一边所有这些数字就可得到0~65535每个数字的个数（在count数组中），然后再顺序遍历count数组，count[n] = m，则输出m个n，（比如说有count[3] = 2, 那么说明有2个数字3），依次输出，最后可得结果。第一次遍历是O(n)，第二次遍历是O(1)，为常量，所以最后的时间复杂度为O(n)，而空间复杂度为O(1)
这个算法很简单，相信大家都会，只是这个题太过于变态了，一般会把面试者吓住
 * @author weifeng
 *
 *一个数组arr的长度为arr.length,数组中的所有的数0<=arr[i]<arr.length
 *遍历数组：if arr[arr[i]] > 0;arr将arr[arr[i]]=-1;
 *如果arr[arr[i]] < 0;arr[arr[i]]--;
 *
 *
 */
public class CountSort {

}
